initSidebarItems({"fn":[["fusion","Fusionne les tableaux de taille `taille_blocs` contenus dans s dans d. Pre-condition: tous les sous-tableaux de taille `taille_blocs` sont tries. # Example: `use tri_fusion::fusion; let source = [0,4,2,3]; let mut destination = [0,0,0,0]; fusion(&source, &mut destination, 2); assert_eq!(destination, [0,2,3,4]); let source = [0,4,5,2,3]; let mut destination = [0,0,0,0,0]; fusion(&source, &mut destination, 3); assert_eq!(destination, [0,2,3,4,5]); let source = [3]; let mut destination = [0]; fusion(&source, &mut destination, 1); assert_eq!(destination, [3]);`"],["remplir_blocs","Remplit la tranche par 'taille' zeros puis 'taille' uns, ... # Example: `use tri_fusion::remplir_blocs; let mut tableau = [0; 5]; remplir_blocs(&mut tableau, 1); assert_eq!(tableau, [0, 1, 2, 3, 4]); remplir_blocs(&mut tableau, 2); assert_eq!(tableau, [0, 0, 1, 1, 2]); remplir_blocs(&mut tableau, 3); assert_eq!(tableau, [0, 0, 0, 1, 1]);`"],["tri_fusion","Tri fusion iteratif # Example: `use tri_fusion::{vecteur_aleatoire, tri_fusion}; let mut v = vecteur_aleatoire(1000); let mut w = v.clone(); v.sort(); tri_fusion(&mut w); assert_eq!(v, w);`"],["vecteur_aleatoire","Renvoie un vecteur de u32 aleatoire (valeurs comprises entre 0 et 99) de la taille donnee."]]});